// Copyright (c) 2025 Redcloud Development, Ltd.
// Licensed under the MIT License. See LICENSE.md in the project root for license information.
//
// Schema for the rtplus Database.

generator client {
   provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum InviteStatus {
    None
    Invited
    Complete
}

model Note {
    id         String          @id @db.VarChar(16)
    personId   String?         @map("person_id") @db.VarChar(16)
    teamId     String?         @map("team_id") @db.VarChar(16)
    title      String          @db.VarChar(100)
    content    String          @db.Text
    date       String          @db.Char(10)

    changeLogs NoteChangeLog[] @relation("note_change_log_to_note")
    person     Person?         @relation("note_to_person", fields: [personId], references: [id], onDelete: Cascade)
    team       Team?           @relation("note_to_team", fields: [teamId], references: [id], onDelete: Cascade)

    @@map("notes")
}

model NoteChangeLog {
    id          String            @id @db.VarChar(16)
    noteId      String            @map("note_id") @db.VarChar(16)
    actorId     String?           @map("actor_id") @db.VarChar(16)
    event       NoteChangeEvent
    meta        Json              @default("{}")
    fields      Json              @default("{}")
    timestamp   DateTime          @default(now())
  
    // Relations
    note        Note              @relation("note_change_log_to_note", fields: [noteId], references: [id], onDelete: Cascade)
    actor       Person?           @relation("note_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("notes_change_log")
}

enum NoteChangeEvent {
    Create
    Update
    Delete
}

/// defines an individual person.
model Person {
    id                           String                       @id @db.VarChar(16)
    name                         String                       @db.VarChar(100)
    email                        String                       @db.VarChar(100) @unique
    clerkUserId                  String?                      @map("clerk_user_id") @db.VarChar(50) @unique
    clerkInvitationId            String?                      @map("clerk_invitation_id") @db.VarChar(50) @unique
    inviteStatus                 InviteStatus                 @map("invite_status") @default(None)
    owningTeamId                 String?                      @map("owning_team_id") @db.VarChar(16)
    type                         PersonType                   @default(Normal)
    status                       RecordStatus                 @default(Active)

    // Relations
    changeLogs                   PersonChangeLog[]            @relation("person_change_log_to_person")
    noteChangeLogs               NoteChangeLog[]              @relation("note_change_log_to_actor")
    notes                        Note[]                       @relation("note_to_person")
    owningTeam                   Team?                        @relation("person_to_owning_team", fields: [owningTeamId], references: [id], onDelete: SetNull)
    personChangeLogs             PersonChangeLog[]            @relation("person_change_log_to_actor")
    skillChecksAsAssessee        SkillCheck[]                 @relation("skill_check_to_assessee")
    skillChecksAsAssessor        SkillCheck[]                 @relation("skill_check_to_assessor")
    skillCheckSessionsAsAssessee SkillCheckSession[]          @relation("skill_check_session_to_assessee")
    skillCheckSessionsAsAssessor SkillCheckSession[]          @relation("skill_check_session_to_assessor")
    skillCheckSessionChangeLogs  SkillCheckSessionChangeLog[] @relation("skill_check_session_change_log_to_actor")
    skillPackageChangeLogs       SkillPackageChangeLog[]      @relation("skill_package_change_log_to_actor")
    teamChangeLogs               TeamChangeLog[]              @relation("team_change_log_to_actor")
    teamMemberships              TeamMembership[]             @relation("team_membership_to_person")

    @@map("personnel")
   
}

enum PersonChangeEvent {
    Create
    Update
    Delete
}

/// defines a change to a person record.
model PersonChangeLog {
    id          String            @id @db.VarChar(16)
    personId    String            @map("person_id") @db.VarChar(16)
    actorId     String?           @map("actor_id") @db.VarChar(16)
    event       PersonChangeEvent
    description String            @default("")
    meta        Json              @default("{}")
    fields      Json              @default("{}")
    timestamp   DateTime          @default(now())
    person      Person            @relation("person_change_log_to_person", fields: [personId], references: [id], onDelete: Cascade)
    actor       Person?           @relation("person_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("personnel_change_log")
}

enum PersonType {
    Normal
    Sandbox
}

/// defines the current status of a record.
enum RecordStatus {
    Active
    Inactive
}

/// defines an individual skill that can be assessed.
model Skill {
    id                 String              @id @db.VarChar(16)
    skillPackageId     String              @map("skill_package_id") @db.VarChar(16)
    skillGroupId       String              @map("skill_group_id") @db.VarChar(16)
    name               String
    description        String
    frequency          String
    optional           Boolean
    sequence           Int
    status             RecordStatus        @default(Active)

    // Relations
    checks             SkillCheck[]        @relation("skill_check_to_skill")
    skillPackage       SkillPackage        @relation("skill_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    skillGroup         SkillGroup          @relation("skill_to_skill_group", fields: [skillGroupId], references: [id], onDelete: Cascade)
    skillCheckSessions SkillCheckSession[] @relation("skill_check_session_to_skill")

    @@map("skills")
}

model SkillCheck {
    id              String                    @id @db.VarChar(16)
    sessionId       String?                   @map("session_id") @db.VarChar(16)
    skillId         String                    @map("skill_id") @db.VarChar(16)
    assesseeId      String                    @map("assessee_id") @db.VarChar(16)
    assessorId      String                    @map("assessor_id") @db.VarChar(16)
    teamId          String                    @map("team_id") @db.VarChar(16)
    passed          Boolean                
    result          String                    @default("")    
    notes           String                    @default("")    
    date            String
    checkStatus     SkillCheckStatus          @default(Draft)
    timestamp       DateTime                  @default(now())

    // Relations
    session         SkillCheckSession?        @relation("skill_check_to_skill_check_session", fields: [sessionId], references: [id], onDelete: SetNull)
    assessee        Person                    @relation("skill_check_to_assessee", fields: [assesseeId], references: [id], onDelete: Cascade)
    assessor        Person                    @relation("skill_check_to_assessor", fields: [assessorId], references: [id], onDelete: Restrict)
    skill           Skill                     @relation("skill_check_to_skill", fields: [skillId], references: [id], onDelete: Cascade)
    team            Team                      @relation("skill_check_to_team", fields: [teamId], references: [id], onDelete: Cascade)

    @@map("skill_checks")
}

model SkillCheckSession {
    id            String                       @id @db.VarChar(16)
    teamId        String                       @map("team_id") @db.VarChar(16)
    name          String                       @db.VarChar(100)
    notes         String                       @default("")
    date          String
    sessionStatus SkillCheckSessionStatus      @default(Draft)

    // Relations
    assessors     Person[]                     @relation("skill_check_session_to_assessor")
    assessees     Person[]                     @relation("skill_check_session_to_assessee")
    changeLogs    SkillCheckSessionChangeLog[] @relation("skill_check_session_change_log_to_skill_check_session")
    checks        SkillCheck[]                 @relation("skill_check_to_skill_check_session")
    skills        Skill[]                      @relation("skill_check_session_to_skill")
    team          Team                         @relation("skill_check_session_to_team", fields: [teamId], references: [id], onDelete: Cascade)
    
    @@map("skill_check_sessions")
}

enum SkillCheckSessionEvent {
    Create
    Update
    Delete
    AddAssessee
    RemoveAssessee
    AddAssessor
    RemoveAssessor
    AddSkill
    RemoveSkill
    CreateCheck
    UpdateCheck
    DeleteCheck
    Complete
    Draft
    Discard
}

model SkillCheckSessionChangeLog {
    id             String                  @id @db.VarChar(16)
    sessionId      String                  @map("session_id") @db.VarChar(16)
    actorId        String?                 @map("actor_id") @db.VarChar(16)
    event          SkillCheckSessionEvent
    description    String                  @default("")
    meta           Json                    @default("{}")
    fields         Json                    @default("{}")
    timestamp      DateTime                @default(now())

    // Relations
    session        SkillCheckSession       @relation("skill_check_session_change_log_to_skill_check_session", fields: [sessionId], references: [id], onDelete: Cascade)
    actor          Person?                 @relation("skill_check_session_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("skill_check_sessions_change_log")
}

enum SkillCheckSessionStatus {
    Draft
    Complete
    Discard
}

enum SkillCheckStatus {
    Draft
    Complete
    Discard
}

/// defines a group of skills within a skill package.
model SkillGroup {
    id             String       @id @db.VarChar(16)
    name           String       @db.VarChar(100)
    description    String       @default("")
    skillPackageId String       @map("skill_package_id") @db.VarChar(16)
    parentId       String?      @map("parent_id") @db.VarChar(16)
    sequence       Int
    status         RecordStatus @default(Active)

    // Relations
    skillPackage   SkillPackage @relation("skill_group_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    parent         SkillGroup?  @relation("skill_group_to_parent", fields: [parentId], references: [id], onDelete: SetNull)
    children       SkillGroup[] @relation("skill_group_to_parent")
    skills         Skill[]      @relation("skill_to_skill_group")

    @@map("skill_groups")
}

/// defines a package of skills that can be assessed.
model SkillPackage {
    id          String                  @id @db.VarChar(16)
    name        String                  @db.VarChar(100)
    description String                  @default("")
    sequence    Int
    status      RecordStatus            @default(Active)

    // Relations
    changeLogs  SkillPackageChangeLog[] @relation("skill_package_change_log_to_skill_package")
    skillGroups SkillGroup[]            @relation("skill_group_to_skill_package")
    skills      Skill[]                 @relation("skill_to_skill_package")

    @@map("skill_packages")
}

enum SkillPackageChangeEvent {
    Create
    Delete
    Update
    CreateSkill
    DeleteSkill
    UpdateSkill
    CreateGroup
    DeleteGroup
    UpdateGroup
}

// defines a change to a skill package record.
model SkillPackageChangeLog {
    id             String                  @id @db.VarChar(16)
    skillPackageId String                  @map("skill_package_id") @db.VarChar(16)
    actorId        String?                 @map("actor_id") @db.VarChar(16)
    event          SkillPackageChangeEvent
    description    String                  @default("")
    meta           Json                    @default("{}")
    fields         Json                    @default("{}")
    timestamp      DateTime                @default(now())

    // Relations
    skillPackage   SkillPackage            @relation("skill_package_change_log_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    actor          Person?                 @relation("skill_package_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("skill_packages_change_log")
}

// defines a response team or similar high level organizational unit.
model Team {
    id                 String              @id @db.VarChar(16)
    clerkOrgId         String              @map("clerk_org_id") @db.VarChar(50) @unique
    slug               String              @db.VarChar(50) @unique
    name               String              @db.VarChar(100)
    shortName          String              @db.VarChar(50)
    color              String              @db.VarChar(10)
    status             RecordStatus        @default(Active)
    type               TeamType            @default(Normal)

    // Relations
    d4hInfo            TeamD4hInfo?        @relation("team_d4h_info_to_team")
    changeLogs         TeamChangeLog[]     @relation("team_change_log_to_team")
    notes              Note[]              @relation("note_to_team")
    ownedPersonnel     Person[]            @relation("person_to_owning_team")
    skillChecks        SkillCheck[]        @relation("skill_check_to_team")
    skillCheckSessions SkillCheckSession[] @relation("skill_check_session_to_team")       
    teamMemberships    TeamMembership[]    @relation("team_membership_to_team")

    @@map("teams")
}

enum TeamChangeEvent {
    Create
    Delete
    Update
    AddMember
    UpdateMember
    RemoveMember
}

/// defines a change to a team record.
model TeamChangeLog {
    id          String          @id @db.VarChar(16)
    teamId      String          @map("team_id") @db.VarChar(16)
    actorId     String?         @map("actor_id") @db.VarChar(16)
    event       TeamChangeEvent
    description String          @default("")
    meta        Json            @default("{}")
    fields      Json            @default("{}")
    timestamp   DateTime        @default(now())

    // Relations
    team        Team            @relation("team_change_log_to_team", fields: [teamId], references: [id], onDelete: Cascade)
    actor       Person?         @relation("team_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("teams_change_log")
}

model TeamD4hInfo {
    teamId     String       @map("team_id") @db.VarChar(16) @unique
    d4hTeamId  Int          @map("d4h_team_id")
    serverCode String       @map("server_code")
    status     RecordStatus @default(Active)

    // Relations
    team      Team          @relation("team_d4h_info_to_team", fields:[teamId], references: [id], onDelete: Cascade)

    @@map("team_d4h_info")
}

model TeamMembership {
    personId           String                 @map("person_id") @db.VarChar(16)
    teamId             String                 @map("team_id") @db.VarChar(16)
    clerkMembershipId  String?                @map("clerk_membership_id") @db.VarChar(50) @unique
    clerkInvitationId  String?                @map("clerk_invitation_id") @db.VarChar(50) @unique
    tags               String[]               @default([])
    status             RecordStatus           @default(Active)
  
    // Relations
    d4hInfo            TeamMembershipD4hInfo? @relation("team_membership_to_d4h_info")
    person             Person                 @relation("team_membership_to_person", fields: [personId], references: [id], onDelete: Cascade)
    team               Team                   @relation("team_membership_to_team", fields: [teamId], references: [id], onDelete: Cascade)

    @@id([personId, teamId])
    @@map("team_memberships")
}

model TeamMembershipD4hInfo {
    personId         String                  @map("person_id") @db.VarChar(16)
    teamId           String                  @map("team_id") @db.VarChar(16)
    position         String
    d4hStatus        TeamMembershipD4hStatus @map("d4h_status")
    d4hMemberId      Int                     @map("d4h_member_id")
    d4hRef           String                  @map("d4h_ref")

    // Relations
    teamMembership   TeamMembership          @relation("team_membership_to_d4h_info", fields: [personId, teamId], references: [personId, teamId], onDelete: Cascade)                  

    @@id([personId, teamId])
    @@map("team_memberships_d4h_info")
}

enum TeamMembershipD4hStatus {
    Operational
    NonOperational
    Observer
    Retired
}

enum TeamType {
    Normal
    Sandbox
    System
}