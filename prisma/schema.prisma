// Copyright (c) 2025 Redcloud Development, Ltd.
// Licensed under the MIT License. See LICENSE.md in the project root for license information.
//
// Schema for the rtplus Database.

generator client {
   provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

/// defines an individual person.
model Person {
    id                           String                  @id @default(uuid()) @db.Uuid
    name                         String                  @db.VarChar(100)
    email                        String                  @db.VarChar(100) @unique
    clerkUserId                  String?                 @map("clerk_user_id") @db.VarChar(50) @unique
    onboardingStatus             PersonOnboardingStatus  @map("onboarding_status") @default(NotStarted)
    status                       RecordStatus            @default(Active)
  
    // Relations
    changeLogs                   PersonChangeLog[]       @relation("person_change_log_to_person")
    personChangeLogs             PersonChangeLog[]       @relation("person_change_log_to_actor")
    skillChecksAsAssessee        SkillCheck[]            @relation("skill_check_to_assessee")
    skillChecksAsAssessor        SkillCheck[]            @relation("skill_check_to_assessor")
    skillCheckSessionsAsAssessee SkillCheckSession[]     @relation("skill_check_session_to_assessee")
    skillCheckSessionsAsAssessor SkillCheckSession[]     @relation("skill_check_session_to_assessor")
    skillPackageChangeLogs       SkillPackageChangeLog[] @relation("skill_package_change_log_to_actor")
    teamChangeLogs               TeamChangeLog[]         @relation("team_change_log_to_actor")
    teamMemberships              TeamMembership[]        @relation("team_membership_to_person")

    @@map("personnel")
}

enum PersonChangeEvent {
    Create
    Update
    Delete
}

/// defines a change to a person record.
model PersonChangeLog {
    id          String            @id @default(uuid()) @db.Uuid
    personId    String            @map("person_id") @db.Uuid
    actorId     String?           @map("actor_id") @db.Uuid
    event       PersonChangeEvent
    description String            @default("")
    meta        Json              @default("{}")
    fields      Json              @default("{}")
    timestamp   DateTime          @default(now())
    person      Person            @relation("person_change_log_to_person", fields: [personId], references: [id], onDelete: Cascade)
    actor       Person?           @relation("person_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("personnel_change_log")
}

enum PersonOnboardingStatus {
    NotStarted
    InProgress
    Complete
}

/// defines the current status of a record.
enum RecordStatus {
    Active
    Inactive
    Deleted
}

/// defines an individual skill that can be assessed.
model Skill {
    id                 String              @id @default(uuid()) @db.Uuid
    slug               String              @db.VarChar(100) @unique
    skillPackageId     String              @map("skill_package_id") @db.Uuid
    skillGroupId       String?             @map("skill_group_id") @db.Uuid
    name               String
    description        String
    frequency          String
    optional           Boolean
    sequence           Int
    status             RecordStatus        @default(Active)

    // Relations
    checks             SkillCheck[]        @relation("skill_check_to_skill")
    skillPackage       SkillPackage        @relation("skill_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    skillGroup         SkillGroup?         @relation("skill_to_skill_group", fields: [skillGroupId], references: [id], onDelete: SetNull)
    skillCheckSessions SkillCheckSession[] @relation("skill_check_session_to_skill")

    @@map("skills")
}

model SkillCheck {
    id              String                    @id @default(uuid()) @db.Uuid
    sessionId       String?                   @map("session_id") @db.Uuid
    skillId         String                    @map("skill_id") @db.Uuid
    assesseeId      String                    @map("assessee_id") @db.Uuid
    assessorId      String                    @map("assessor_id") @db.Uuid
    competenceLevel SkillCheckCompetenceLevel @map("competence_level")
    notes           String
    timestamp       DateTime                  @default(now())

    // Relations
    session         SkillCheckSession?        @relation("skill_check_to_skill_check_session", fields: [sessionId], references: [id], onDelete: SetNull)
    assessee        Person                    @relation("skill_check_to_assessee", fields: [assesseeId], references: [id], onDelete: Cascade)
    assessor        Person                    @relation("skill_check_to_assessor", fields: [assessorId], references: [id], onDelete: Restrict)
    skill           Skill                     @relation("skill_check_to_skill", fields: [skillId], references: [id], onDelete: Cascade)

    @@map("skill_checks")
}

enum SkillCheckCompetenceLevel {
    NotAssessed
    NotTaught
    NotCompetent
    Competent
    HighlyConfident
}

model SkillCheckSession {
    id            String                  @id @default(uuid()) @db.Uuid
    assessorId    String                  @map("assessor_id") @db.Uuid
    name          String                  @db.VarChar(100)
    date          DateTime
    sessionStatus SkillCheckSessionStatus @default(Draft)
    createdAt     DateTime                @default(now()) @map("created_at")
    updatedAt     DateTime                @updatedAt @map("updated_at")

    // Relations
    assessor      Person                  @relation("skill_check_session_to_assessor", fields: [assessorId], references: [id], onDelete: Restrict)
    assessees     Person[]                @relation("skill_check_session_to_assessee")
    checks        SkillCheck[]            @relation("skill_check_to_skill_check_session")
    skills        Skill[]                 @relation("skill_check_session_to_skill")
}

enum SkillCheckSessionStatus {
    Draft
    Complete
    Discard
}

enum SkillCheckStatus {
    Draft
    Complete
    Discard
}

/// defines a group of skills within a skill package.
model SkillGroup {
    id             String       @id @default(uuid()) @db.Uuid
    slug           String       @db.VarChar(100) @unique
    name           String       @db.VarChar(100)
    skillPackageId String       @map("skill_package_id") @db.Uuid
    parentId       String?      @map("parent_id") @db.Uuid
    sequence       Int
    status         RecordStatus @default(Active)

    // Relations
    skillPackage   SkillPackage @relation("skill_group_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    parent         SkillGroup?  @relation("skill_group_to_parent", fields: [parentId], references: [id], onDelete: SetNull)
    children       SkillGroup[] @relation("skill_group_to_parent")
    skills         Skill[]      @relation("skill_to_skill_group")

    @@map("skill_groups")
}

/// defines a package of skills that can be assessed.
model SkillPackage {
    id          String                  @id @default(uuid()) @db.Uuid
    slug        String                  @db.VarChar(100) @unique
    name        String                  @db.VarChar(100)
    sequence    Int
    status      RecordStatus            @default(Active)

    // Relations
    changeLogs  SkillPackageChangeLog[] @relation("skill_package_change_log_to_skill_package")
    skillGroups SkillGroup[]            @relation("skill_group_to_skill_package")
    skills      Skill[]                 @relation("skill_to_skill_package")

    @@map("skill_packages")
}

enum SkillPackageChangeEvent {
    Create
    Delete
    Update
    CreateSkill
    DeleteSkill
    UpdateSkill
    CreateGroup
    DeleteGroup
    UpdateGroup
}

// defines a change to a skill package record.
model SkillPackageChangeLog {
    id             String                  @id @default(uuid()) @db.Uuid()
    skillPackageId String                  @map("skill_package_id") @db.Uuid
    actorId        String?                 @map("actor_id") @db.Uuid
    event          SkillPackageChangeEvent
    description    String                  @default("")
    meta           Json                    @default("{}")
    fields         Json                    @default("{}")
    timestamp      DateTime                @default(now())

    // Relations
    skillPackage   SkillPackage            @relation("skill_package_change_log_to_skill_package", fields: [skillPackageId], references: [id], onDelete: Cascade)
    actor          Person?                 @relation("skill_package_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("skill_packages_change_log")
}

// defines a response team or similar high level organizational unit.
model Team {
    id              String           @id @default(uuid()) @db.Uuid
    clerkOrgId      String           @map("clerk_org_id") @db.VarChar(50) @unique
    slug            String           @db.VarChar(100) @unique
    name            String           @db.VarChar(100)
    shortName       String           @db.VarChar(50)
    color           String           @db.VarChar(10)
    status          RecordStatus     @default(Active)

    // Relations
    d4hInfo         TeamD4hInfo?     @relation("team_d4h_info_to_team")
    changeLogs      TeamChangeLog[]  @relation("team_change_log_to_team")       
    teamMemberships TeamMembership[] @relation("team_membership_to_team")

    @@map("teams")
}

enum TeamChangeEvent {
    Create
    Delete
    Update
    AddMember
    UpdateMember
    RemoveMember
}

/// defines a change to a team record.
model TeamChangeLog {
    id          String          @id @default(uuid()) @db.Uuid
    teamId      String          @map("team_id") @db.Uuid
    actorId     String?         @map("actor_id") @db.Uuid
    event       TeamChangeEvent
    description String          @default("")
    meta        Json            @default("{}")
    fields      Json            @default("{}")
    timestamp   DateTime        @default(now())

    // Relations
    team        Team            @relation("team_change_log_to_team", fields: [teamId], references: [id], onDelete: Cascade)
    actor       Person?         @relation("team_change_log_to_actor", fields: [actorId], references: [id], onDelete: SetNull)

    @@map("teams_change_log")
}

model TeamD4hInfo {
    teamId     String       @map("team_id") @db.Uuid @unique
    d4hTeamId  Int          @map("d4h_team_id")
    serverCode String       @map("server_code")
    status     RecordStatus @default(Active)

    // Relations
    team      Team          @relation("team_d4h_info_to_team", fields:[teamId], references: [id], onDelete: Cascade)

    @@map("team_d4h_info")
}

model TeamMembership {
    id          String                 @id @default(uuid()) @db.Uuid
    personId    String                 @map("person_id") @db.Uuid
    teamId      String                 @map("team_id") @db.Uuid
    role        TeamMembershipRole     @default(Member)
    status      RecordStatus           @default(Active)
  
    // Relations
    d4hInfo     TeamMembershipD4hInfo? @relation("team_membership_to_d4h_info")
    person      Person                 @relation("team_membership_to_person", fields: [personId], references: [id], onDelete: Cascade)
    team        Team                   @relation("team_membership_to_team", fields: [teamId], references: [id], onDelete: Cascade)

    @@map("team_memberships")
}

model TeamMembershipD4hInfo {
    teamMembershipId String                  @map("team_membership_id") @db.Uuid @unique
    position         String
    d4hStatus        TeamMembershipD4hStatus @map("d4h_status")
    d4hMemberId      Int                     @map("d4h_member_id")
    d4hRef           String                  @map("d4h_ref")

    // Relations
    teamMembership   TeamMembership          @relation("team_membership_to_d4h_info", fields: [teamMembershipId], references: [id], onDelete: Cascade)                  

    @@map("team_memberships_d4h_info")
}

enum TeamMembershipD4hStatus {
    Operational
    NonOperational
    Observer
    Retired
}

enum TeamMembershipRole {
    Admin
    Member
    None
}