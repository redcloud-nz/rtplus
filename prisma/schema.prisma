// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model D4hAccessKey {
    id              String      @default(cuid()) @id
    key             String                                                  // The access key.
    enabled         Boolean                                                 // If this access key is currently enabled.
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    person          Person      @relation(fields: [personId], references: [id])
    personId        String
    team            Team        @relation(fields: [teamId], references: [id])
    teamId          String        
}

model Person {
    id              String      @default(cuid()) @id
    ref             String?
    name            String
    email           String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    memberships     TeamMembership[]
    d4hAccessKeys   D4hAccessKey[]
    assessments     CompetencyAssessment[]
    skillChecksAsAssessee   SkillCheck[] @relation("SkillCheckAssessee")
    skillChecksAsAssessor   SkillCheck[] @relation("SkillCheckAssessor")
}

model Skill {
    id              String      @default(cuid()) @id
    ref             String?     
    skillGroup      SkillGroup  @relation(fields: [skillGroupId], references: [id])
    skillGroupId    String
    name            String
    description     String
    frequency       String                              // Stored as an ISO-8601 Duration
    optional        Boolean
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    assessments     CompetencyAssessment[]
    checks          SkillCheck[]
}

model SkillCheck {
    id              String      @default(cuid()) @id
    skill           Skill       @relation(fields: [skillId], references: [id])
    skillId         String
    assessee        Person      @relation("SkillCheckAssessee", fields: [assesseeId], references: [id])
    assesseeId      String
    assessor        Person      @relation("SkillCheckAssessor", fields: [assessorId], references: [id])
    assessorId      String
    result          String
    notes           String
    checkedAt       DateTime    @default(now())
}

model SkillGroup {
    id              String      @default(cuid()) @id
    ref             String?     
    capability      Capability  @relation(fields: [capabilityId], references: [id])
    capabilityId    String
    name            String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    skills          Skill[]
}

model Capability {
    id              String      @default(cuid()) @id
    ref             String?     
    name            String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt   
    
    skillGroups     SkillGroup[]  
}

model CompetencyAssessment {
    id              String      @default(cuid()) @id
    name            String
    location        String
    date            DateTime
    status          AssessmentStatus @default(Draft)
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    assessees       Person[]
    skills          Skill[]        
}

enum AssessmentStatus {
    Draft
    Complete
    Discard
}

model Team {
    id              String      @default(cuid()) @id
    ref             String?     
    name            String
    color           String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    d4hTeamId       Int
    d4hApiUrl       String
    d4hWebUrl       String
    d4hAccessKeys   D4hAccessKey[]
    memberships     TeamMembership[]
}

model TeamMembership {
    id              String      @default(cuid()) @id
    position        String
    status          TeamMemberStatus
    d4hMemberId     Int
    d4HRef          String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    person          Person      @relation(fields: [personId], references: [id])
    personId        String
    team            Team        @relation(fields: [teamId], references: [id])
    teamId          String
}

enum TeamMemberStatus {
    Operational
    NonOperational
    Observer
    Retired
}