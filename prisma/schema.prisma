generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model CompetencyAssessment {
  id        String                     @id @default(cuid())
  orgId     String                     @map("org_id")
  userId    String                     @map("user_id")
  name      String
  location  String
  date      DateTime
  status    CompetencyAssessmentStatus @default(Draft)
  createdAt DateTime                   @default(now()) @map("created_at")
  updatedAt DateTime                   @updatedAt @map("updated_at")
  assessees Person[]                   @relation("CompetencyAssessmentToPerson")
  skills    Skill[]                    @relation("CompetencyAssessmentToSkill")

  @@map("competency_assessments")
}

model D4hAccessKey {
  id        String   @id @default(cuid())
  orgId     String   @map("org_id")
  userId    String?  @map("user_id")
  key       String
  enabled   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  teamId    String   @map("team_id")
  team      Team     @relation(fields: [teamId], references: [id])

  @@map("d4h_access_keys")
}

model HistoryEvent {
  id          String                 @id @default(cuid())
  orgId       String                 @map("org_id")
  userId      String?                @map("user_id")
  description String
  eventType   HistoryEventType       @map("event_type")
  objectType  HistoryEventObjectType @map("object_type")
  objectId    String                 @map("object_id")
  parentId    String?                @map("parent_id")
  meta        Json
  timestamp   DateTime               @default(now())
  parent      HistoryEvent?          @relation("parent", fields: [parentId], references: [id])
  children    HistoryEvent[]         @relation("parent")

  @@map("history_events")
}

model Person {
  id                    String                 @id @default(cuid())
  userId                String?                @map("user_id")
  ref                   String?
  name                  String
  email                 String
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  status                RecordStatus           @default(Active)
  skillChecksAsAssessee SkillCheck[]           @relation("skill_check_assessee")
  skillChecksAsAssessor SkillCheck[]           @relation("skill_check_assessor")
  memberships           TeamMembership[]
  assessments           CompetencyAssessment[] @relation("CompetencyAssessmentToPerson")

  @@map("personnel")
}

model Skill {
  id           String                 @id @default(cuid())
  ref          String?
  packageId    String                 @map("package_id")
  skillGroupId String?                @map("skill_group_id")
  name         String
  description  String
  frequency    String
  optional     Boolean
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  status       RecordStatus           @default(Active)
  checks       SkillCheck[]
  package      SkillPackage           @relation(fields: [packageId], references: [id])
  skillGroup   SkillGroup?            @relation(fields: [skillGroupId], references: [id])
  assessments  CompetencyAssessment[] @relation("CompetencyAssessmentToSkill")

  @@map("skills")
}

model SkillCheck {
  id         String   @id @default(cuid())
  orgId      String   @map("org_id")
  userId     String   @map("user_id")
  skillId    String   @map("skill_id")
  assesseeId String   @map("assessee_id")
  assessorId String   @map("assessor_id")
  result     String
  notes      String
  timestamp  DateTime @default(now())
  assessee   Person   @relation("skill_check_assessee", fields: [assesseeId], references: [id])
  assessor   Person   @relation("skill_check_assessor", fields: [assessorId], references: [id])
  skill      Skill    @relation(fields: [skillId], references: [id])

  @@map("skill_checks")
}

model SkillGroup {
  id        String       @id @default(cuid())
  ref       String?
  name      String
  packageId String       @map("package_id")
  parentId  String?      @map("parent_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  status    RecordStatus @default(Active)
  package   SkillPackage @relation(fields: [packageId], references: [id])
  parent    SkillGroup?  @relation("parent", fields: [parentId], references: [id])
  children  SkillGroup[] @relation("parent")
  skills    Skill[]

  @@map("skill_groups")
}

model SkillPackage {
  id          String       @id @default(cuid())
  ref         String?
  name        String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  status      RecordStatus @default(Active)
  skillGroups SkillGroup[]
  skills      Skill[]

  @@map("skill_packages")
}

model Team {
  id            String           @id @default(cuid())
  orgId         String           @map("org_id")
  ref           String?
  name          String
  color         String
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  status        RecordStatus     @default(Active)
  d4hTeamId     Int              @map("d4h_team_id")
  d4hApiUrl     String           @map("d4h_api_url")
  d4hWebUrl     String           @map("d4h_web_url")
  d4hAccessKeys D4hAccessKey[]
  memberships   TeamMembership[]

  @@map("teams")
}

model TeamMembership {
  id          String           @id @default(cuid())
  orgId       String           @map("org_id")
  position    String
  d4hStatus   TeamMemberStatus @map("d4h_status")
  d4hMemberId Int              @map("d4h_member_id")
  d4hRef      String           @map("d4h_ref")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  status      RecordStatus     @default(Active)
  personId    String           @map("person_id")
  teamId      String           @map("team_id")
  person      Person           @relation(fields: [personId], references: [id])
  team        Team             @relation(fields: [teamId], references: [id])

  @@map("team_memberships")
}

enum RecordStatus {
  Active
  Inactive
}

enum CompetencyAssessmentStatus {
  Draft
  Complete
  Discard
}

enum HistoryEventObjectType {
  CompetencyAssessment
  D4hAccessKey
  Person
  Skill
  SkillGroup
  SkillPackage
  Team
  TeamMembership
}

enum HistoryEventType {
  Clone
  Create
  Delete
  Import
  Update
}

enum TeamMemberStatus {
  Operational
  NonOperational
  Observer
  Retired
}
