generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model D4hAccessKey {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.VarChar(50)
  key       String
  enabled   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  teamId    String   @map("team_id") @db.Uuid
  team      Team     @relation("access_key_to_team", fields: [teamId], references: [id])

  @@map("d4h_access_keys")
}

model D4hTeamMembership {
  id          String           @id @default(uuid()) @db.Uuid
  position    String
  d4hStatus   TeamMemberStatus @map("d4h_status")
  d4hMemberId Int              @map("d4h_member_id")
  d4hRef      String           @map("d4h_ref")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  status      RecordStatus     @default(Active)
  personId    String           @map("person_id") @db.Uuid
  teamId      String           @map("team_id") @db.Uuid
  person      Person           @relation("d4h_team_membership_to_person", fields: [personId], references: [id])
  team        Team             @relation("d4h_team_membership_to_team", fields: [teamId], references: [id])

  @@map("d4h_team_memberships")
}

model HistoryEvent {
  id          String                 @id @default(uuid()) @db.Uuid
  userId      String?                @map("user_id") @db.VarChar(50)
  description String
  eventType   HistoryEventType       @map("event_type")
  objectType  HistoryEventObjectType @map("object_type")
  objectId    String                 @map("object_id") @db.Uuid
  parentId    String?                @map("parent_id") @db.Uuid
  meta        Json
  timestamp   DateTime               @default(now())
  parent      HistoryEvent?          @relation("history_event_to_parent", fields: [parentId], references: [id])
  children    HistoryEvent[]         @relation("history_event_to_parent")

  @@map("history_events")
}

model Person {
  id                           String              @id @default(uuid()) @db.Uuid
  userId                       String?             @map("user_id") @db.VarChar(50)
  ref                          String?             @db.VarChar(100)
  name                         String
  email                        String
  createdAt                    DateTime            @default(now()) @map("created_at")
  updatedAt                    DateTime            @updatedAt @map("updated_at")
  status                       RecordStatus        @default(Active)
  skillChecksAsAssessee        SkillCheck[]        @relation("skill_check_to_assessee")
  skillChecksAsAssessor        SkillCheck[]        @relation("skill_check_to_assessor")
  d4hTeamMemberships           D4hTeamMembership[] @relation("d4h_team_membership_to_person")
  skillCheckSessionsAsAssessee SkillCheckSession[] @relation("skill_check_session_to_assessee")
  skillCheckSessionsAsAssessor SkillCheckSession[] @relation("skill_check_session_to_assessor")

  @@map("personnel")
}

model Skill {
  id                 String              @id @default(uuid()) @db.Uuid
  ref                String?             @db.VarChar(100)
  packageId          String              @map("package_id") @db.Uuid
  skillGroupId       String?             @map("skill_group_id") @db.Uuid
  name               String
  description        String
  frequency          String
  optional           Boolean
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  status             RecordStatus        @default(Active)
  checks             SkillCheck[]        @relation("skill_check_to_skill")
  package            SkillPackage        @relation("skill_to_skill_package", fields: [packageId], references: [id])
  skillGroup         SkillGroup?         @relation("skill_to_skill_group", fields: [skillGroupId], references: [id])
  skillCheckSessions SkillCheckSession[] @relation("skill_check_session_to_skill")

  @@map("skills")
}

model SkillCheck {
  id              String             @id @default(uuid()) @db.Uuid
  userId          String             @map("user_id") @db.VarChar(50)
  sessionId       String?            @map("session_id") @db.Uuid
  skillId         String             @map("skill_id") @db.Uuid
  assesseeId      String             @map("assessee_id") @db.Uuid
  assessorId      String             @map("assessor_id") @db.Uuid
  competenceLevel CompetenceLevel    @map("competence_level")
  notes           String
  timestamp       DateTime           @default(now())
  session         SkillCheckSession? @relation("skill_check_to_skill_check_session", fields: [sessionId], references: [id])
  assessee        Person             @relation("skill_check_to_assessee", fields: [assesseeId], references: [id])
  assessor        Person             @relation("skill_check_to_assessor", fields: [assessorId], references: [id])
  skill           Skill              @relation("skill_check_to_skill", fields: [skillId], references: [id])

  @@map("skill_checks")
}

model SkillCheckSession {
  id         String                  @id @default(uuid()) @db.Uuid
  userId     String                  @map("user_id") @db.VarChar(50)
  assessorId String                  @map("assessor_id") @db.Uuid
  name       String
  date       DateTime
  status     SkillCheckSessionStatus @default(Draft)
  createdAt  DateTime                @default(now()) @map("created_at")
  updatedAt  DateTime                @updatedAt @map("updated_at")
  assessor   Person                  @relation("skill_check_session_to_assessor", fields: [assessorId], references: [id])
  assessees  Person[]                @relation("skill_check_session_to_assessee")
  skills     Skill[]                 @relation("skill_check_session_to_skill")
  checks     SkillCheck[]            @relation("skill_check_to_skill_check_session")
}

model SkillGroup {
  id        String       @id @default(uuid()) @db.Uuid
  ref       String?      @db.VarChar(100)
  name      String
  packageId String       @map("package_id") @db.Uuid
  parentId  String?      @map("parent_id") @db.Uuid
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  status    RecordStatus @default(Active)
  package   SkillPackage @relation("skill_group_to_skill_package", fields: [packageId], references: [id])
  parent    SkillGroup?  @relation("skill_group_to_parent", fields: [parentId], references: [id])
  children  SkillGroup[] @relation("skill_group_to_parent")
  skills    Skill[]      @relation("skill_to_skill_group")

  @@map("skill_groups")
}

model SkillPackage {
  id          String       @id @default(uuid()) @db.Uuid
  ref         String?      @db.VarChar(100)
  name        String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  status      RecordStatus @default(Active)
  skillGroups SkillGroup[] @relation("skill_group_to_skill_package")
  skills      Skill[]      @relation("skill_to_skill_package")

  @@map("skill_packages")
}

model Team {
  id                 String              @id @default(cuid()) @db.Uuid
  ref                String?             @db.VarChar(100)
  name               String
  color              String              @db.VarChar(10)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  status             RecordStatus        @default(Active)
  d4hTeamId          Int                 @map("d4h_team_id")
  d4hApiUrl          String              @map("d4h_api_url")
  d4hWebUrl          String              @map("d4h_web_url")
  d4hAccessKeys      D4hAccessKey[]      @relation("access_key_to_team")
  d4hTeamMemberships D4hTeamMembership[] @relation("d4h_team_membership_to_team")

  @@map("teams")
}

enum CompetenceLevel {
    NotAssessed
    NotTaught
    NotCompetent
    Competent
    HighlyConfident
}

enum RecordStatus {
  Active
  Inactive
}

enum HistoryEventObjectType {
  D4hAccessKey
  Person
  Skill
  SkillCheckSession
  SkillGroup
  SkillPackage
  Team
  TeamMembership
}

enum HistoryEventType {
  Clone
  Create
  Delete
  Import
  Update
}

enum SkillCheckSessionStatus {
  Draft
  Complete
  Discard
}

enum TeamMemberStatus {
  Operational
  NonOperational
  Observer
  Retired
}
